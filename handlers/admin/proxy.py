
from time import time
import os
from aiogram import types
from aiogram.dispatcher.filters import Text

from data.config import ADMINS_ID
from loader import dp


@dp.message_handler(Text(startswith='/proxy'), user_id=ADMINS_ID, state='*')
async def give_sub(message: types.Message):
    try:
        services = {
            'vt': 'üåé VINTED',
            'jg': 'üá≠üá∫ JOFOGAS'
        }
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for service in services:
            markup.insert(
                types.KeyboardButton(text=f'{services[service]}')
            )
        await message.answer('–í—ã–±–µ—Ä–∏ —Å–µ—Ä–≤–∏—Å –¥–ª—è –∑–∞–º–µ–Ω—ã –ø—Ä–æ–∫—Å–∏. –§–æ—Ä–º–∞—Ç –¥–ª—è –ø—Ä–æ–∫—Å–∏: user:pass@ip:port. üëá\n –ó–∞–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç –º–æ–∂–Ω–æ —Ç—É—Ç: \nhttps://buyproxies.org/panel/format.php', reply_markup=markup)
    except ValueError:
        await message.answer('<b>‚ùóÔ∏è –ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–æ–º!</b>')
    except IndexError:
        await message.answer('<b>‚ùóÔ∏è –ê—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—Å–µ–≥–æ 2!</b>')


@dp.message_handler(Text(startswith='üåé VINTED'), user_id=ADMINS_ID, state='*')
async def set_proxy_vt(message: types.Message):
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –ø—Ä–æ–∫—Å–∏ –¥–ª—è VINTED –≤ —Ñ–æ—Ä–º–∞—Ç–µ: user:pass@ip:port. –ù–∞–∑–æ–≤–∏—Ç–µ —Ñ–∞–π–ª - vinted.txt')


@dp.message_handler(Text(startswith='üá≠üá∫ JOFOGAS'), user_id=ADMINS_ID, state='*')
async def set_proxy_jg(message: types.Message):
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –ø—Ä–æ–∫—Å–∏ –¥–ª—è JOFOGAS –≤ —Ñ–æ—Ä–º–∞—Ç–µ: user:pass@ip:port. –ù–∞–∑–æ–≤–∏—Ç–µ —Ñ–∞–π–ª - jofogas.txt')


@dp.message_handler(Text(startswith='/vinted_p'), user_id=ADMINS_ID, state='*')
async def proxy_vt(message: types.Message):
    lines = message.text.split("\n")
    print(lines)
    is_valid = True
    for line in lines[1:-1]:
        if line == '/vinted_p':
            return
        parts = line.split(":")
        if len(parts) != 3:
            is_valid = False
            await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ - user:pass@ip:port!')
            break
    
    if is_valid:
        file_path = "proxy/vinted.txt"
        os.makedirs(os.path.dirname(file_path), exist_ok=True)
        with open(file_path, "w") as f:
            f.write("\n".join(message.text.split("\n")[1:-1]))
            await message.answer('–ü—Ä–æ–∫—Å–∏ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è Vinted!')


@dp.message_handler(Text(startswith='/jofagas_p'), user_id=ADMINS_ID, state='*')
async def proxy_vt(message: types.Message):
    lines = message.text.split("\n")
    print(lines)
    is_valid = True
    for line in lines[1:-1]:
        if line == '/jofagas_p':
            return
        parts = line.split(":")
        if len(parts) != 3:
            is_valid = False
            await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ - user:pass@ip:port!')
            break

    if is_valid:
        file_path = "proxy/jofagas.txt"
        os.makedirs(os.path.dirname(file_path), exist_ok=True)
        with open(file_path, "w") as f:
            f.write("\n".join(message.text.split("\n")[1:-1]))
            await message.answer('–ü—Ä–æ–∫—Å–∏ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è Jofagas!')

